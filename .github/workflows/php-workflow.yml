name: PHP-CICD

on:
    push:
        branches:
            - master
            - production

env:
    DOCKER_REGISTRY: docker.io # Replace by "docker.pkg.github.com" for github registry
    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Replace by ${{ github.actor }} for github registry
    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Replace by ${{ github.token }} for github registry
    PHP_IMAGE: ${{ secrets.DOCKER_USERNAME }}/gh-php # Replace by ${{ github.repository }}/gh-php for github registry
    PHP_TEST_IMAGE: ${{ secrets.DOCKER_USERNAME }}/gh-php-test # Replace by ${{ github.repository }}/gh-php-test for github registry

jobs:
    php_build:
        name: Builds
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            # - name: Get docker images exist # Doesn't work with docker.pkg.github.com
            #   id: get_docker_images_exist
            #   env:
            #     DOCKER_CLI_EXPERIMENTAL: enabled
            #   run: |
            #     echo ${{ env.DOCKER_PASSWORD }} | docker login ${{env.DOCKER_REGISTRY}} --username ${{env.DOCKER_USERNAME}} --password-stdin
            #     echo ${{ env.PHP_IMAGE }}:latest
            #     echo "There: $(docker manifest inspect ${{ env.PHP_IMAGE }}:latest > /dev/null && echo 0 || echo 1)"
            #     echo "There again: $(docker manifest inspect ${{ env.PHP_TEST_IMAGE }}:latest > /dev/null && echo 0 || echo 1)"
            #     echo "::set-output name=php_image_exist::$(docker manifest inspect ${{ env.PHP_IMAGE }}:latest > /dev/null && echo 0 || echo 1)"
            #     echo "::set-output name=php_test_image_exist::$(docker manifest inspect ${{ env.PHP_TEST_IMAGE }}:latest > /dev/null && echo 0 || echo 1)"
            #     echo "PHP: ${{steps.get_docker_images_exist.outputs.php_image_exist}}"
            #     echo "TEST: ${{steps.get_docker_images_exist.outputs.php_test_image_exist}}"
            - name: Get file changes
              id: get_file_changes
              uses: dorner/file-changes-action@v1.2.0
              with:
                githubToken: ${{ github.token }}
                plaintext: true
            - name: Check if PHP image exist in registry
              id: is_php_image_exist
              uses: tm-bverret/docker-exist-action@v1
              with:
                registry: docker.io
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
                image: ${{ env.PHP_IMAGE }}:latest
            - if: steps.is_php_image_exist.outputs.image_exist
              run: echo "TRUE"
            - if: !steps.is_php_image_exist.outputs.image_exist
              run: echo "FALSE"
            - name: Publish PHP Image
              # In this if, remove the or if use github docker registry
              if: contains(steps.get_file_changes.outputs.files, 'docker/Dockerfile') || !((steps.is_php_image_exist.outputs.image_exist))
              uses: docker/build-push-action@v1.1.0
              with:
                name: ${{ env.PHP_IMAGE }}
                username: ${{env.DOCKER_USERNAME}}
                password: ${{env.DOCKER_PASSWORD}}
                registry: ${{env.DOCKER_REGISTRY}}
                cache_froms: ${{ env.PHP_IMAGE }}:latest
                dockerfile: docker/Dockerfile
                repository: ${{ env.PHP_IMAGE }}
                tag_with_sha: true
                tags: latest
            - name: Check if PHP Test image exist in registry
              id: is_php_test_image_exist
              uses: tm-bverret/docker-exist-action@v1
              with:
                registry: docker.io
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
                image: ${{ env.PHP_TEST_IMAGE }}:latest
            - name: Publish PHP Test Image
              if: contains(steps.get_file_changes.outputs.files, 'docker/Test.Dockerfile') || !steps.is_php_test_image_exist.outputs.image_exist
              uses: docker/build-push-action@v1.1.0
              with:
                name: ${{ env.PHP_TEST_IMAGE }}
                username: ${{env.DOCKER_USERNAME}}
                password: ${{env.DOCKER_PASSWORD}}
                registry: ${{env.DOCKER_REGISTRY}}
                cache_froms: ${{ env.PHP_IMAGE }}:latest,${{ env.PHP_TEST_IMAGE }}:latest
                dockerfile: docker/Test.Dockerfile
                repository: ${{ env.PHP_TEST_IMAGE }}
                build_args: base_image=${{env.DOCKER_REGISTRY}}/${{env.PHP_IMAGE}}:latest
                tag_with_sha: true
                tags: latest
            - name: Build Failure Handler
              if: failure()
              run: |
                chmod +x ./scripts/on_build_failure.sh
                sh ./scripts/on_build_failure.sh

    php_test:
        name: Tests
        runs-on: ubuntu-latest
        needs: ["php_build"]
        container: docker://docker.io/kerberosmorphy/gh-php-test:latest
            # image: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
            # Variable not working in container image name
            # https://github.community/t/how-to-use-env-with-container-image/17252
            # image: docker.pkg.github.com/tm-bverret/php_cicd/gh-php-test:latest
        steps:
            - uses: actions/checkout@v2
            - name: Unit Test
              run: |
                phpunit --bootstrap ./src/Calculator.php ./tests/CalculatorTest.php
                phpunit --bootstrap ./src/Email.php ./tests/EmailTest.php
            - name: Integration Test
              run: phpunit --bootstrap ./src/Music.php ./tests/MusicIntegrationTest.php
            - name: Functional Test
              run: phpunit --bootstrap ./src/Music.php ./tests/MusicFunctionalTest.php
            - name: Test Failure Handler
              if: failure()
              run: |
                chmod +x ./scripts/on_test_failure.sh
                sh ./scripts/on_test_failure.sh

    php_deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: ["php_test"]
        steps:
            - uses: actions/checkout@v2
            - name: chatops:deploy
              run: echo "Execute some chatbot to ask manual deploy"
            - name: php:deploy
              run: echo "Triggered by chatbot response"
            - name: Deploy Failure Handler
              if: failure()
              run: |
                chmod +x ./scripts/on_deploy_failure.sh
                sh ./scripts/on_deploy_failure.sh
