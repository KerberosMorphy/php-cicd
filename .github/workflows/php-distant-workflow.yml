name: PHP Distant Workflow

on:
  workflow_dispatch:
    inputs:
      DOCKER_REGISTRY:
        description: 'DOCKER_REGISTRY'
        required: true
        default: '0'
      DOCKER_USERNAME:
        description: 'DOCKER_USERNAME'
        required: true
        default: '0'
      DOCKER_PASSWORD:
        description: 'DOCKER_PASSWORD'
        required: true
        default: '0'
      PHP_IMAGE:
        description: 'PHP_IMAGE'
        required: true
        default: '0'
      PHP_TEST_IMAGE:
        description: 'PHP_TEST_IMAGE'
        required: true
        default: '0'
      PERSONAL_TOKEN:
        description: 'PERSONAL_TOKEN'
        required: true
        default: '0'
      GH_REF:
        description: 'GH_REF'
        required: true
        default: '0'
      GH_REPOSITORY:
        description: 'GH_REPOSITORY'
        required: true
        default: '0'
      GH_SHA:
        description: 'GH_SHA'
        required: true
        default: '0'

env:
  DOCKER_REGISTRY: ${{ github.event.inputs.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ github.event.inputs.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ github.event.inputs.DOCKER_PASSWORD }}
  PHP_IMAGE: ${{ github.event.inputs.PHP_IMAGE }}
  PHP_TEST_IMAGE: ${{ github.event.inputs.PHP_TEST_IMAGE }}
  PERSONAL_TOKEN: ${{ github.event.inputs.PERSONAL_TOKEN }}
  GH_REF: ${{ github.event.inputs.GH_REF }}
  GH_REPOSITORY: ${{ github.event.inputs.GH_REPOSITORY }}
  GH_SHA: ${{ github.event.inputs.GH_SHA }}

jobs:
  php_build:
    name: Builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          token: ${{ env.PERSONAL_TOKEN }}
          repository: ${{ env.GH_REPOSITORY }}
          ref: ${{ env.GH_REF }}
      - run: |
          echo "GH_REF=${{ env.GH_REF }}"
          echo "GH_REPOSITORY=${{ env.GH_REPOSITORY }}"
          echo "GH_SHA=${{ env.GH_SHA }}"
          echo "GITHUB_REF=${{ github.ref }}"
          echo "GITHUB_REPOSITORY=${{ github.repository }}"
          echo "GITHUB_SHA=${{ github.sha }}"
      - name: Get file changes
        id: file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          githubToken: ${{ env.PERSONAL_TOKEN }}
          output: ";"
      - name: Check if PHP image exist in registry
        id: is_php_image_exist
        uses: tm-bverret/docker-exist-action@v1.1.2
        with:
          registry: docker.io
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          image: ${{ env.PHP_IMAGE }}:latest
      - name: Publish PHP Image
        # In this if, remove the or if use github docker registry
        if: contains(steps.file_changes.outputs.files, 'docker/Dockerfile') || !((steps.is_php_image_exist.outputs.image_exist))
        uses: docker/build-push-action@v1.1.0
        with:
          name: ${{ env.PHP_IMAGE }}
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
          registry: ${{env.DOCKER_REGISTRY}}
          cache_froms: ${{ env.PHP_IMAGE }}:latest
          dockerfile: docker/Dockerfile
          repository: ${{ env.PHP_IMAGE }}
          tags: latest,${{ env.GH_SHA }}
      - name: Check if PHP Test image exist in registry
        id: is_php_test_image_exist
        uses: tm-bverret/docker-exist-action@v1.1.2
        with:
          registry: docker.io
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          image: ${{ env.PHP_TEST_IMAGE }}:latest
      - name: Publish PHP Test Image
        if: contains(steps.get_file_changes.outputs.files, 'docker/Test.Dockerfile') || !((steps.is_php_test_image_exist.outputs.image_exist))
        uses: docker/build-push-action@v1.1.0
        with:
          name: ${{ env.PHP_TEST_IMAGE }}
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
          registry: ${{env.DOCKER_REGISTRY}}
          cache_froms: ${{ env.PHP_IMAGE }}:latest,${{ env.PHP_TEST_IMAGE }}:latest
          dockerfile: docker/Test.Dockerfile
          repository: ${{ env.PHP_TEST_IMAGE }}
          build_args: base_image=${{env.DOCKER_REGISTRY}}/${{env.PHP_IMAGE}}:latest
          tags: latest,${{ env.GH_SHA }}
      - name: Build Failure Handler
        if: failure()
        run: |
          chmod +x ./scripts/on_build_failure.sh
          sh ./scripts/on_build_failure.sh

  php_test:
    name: Tests
    runs-on: ubuntu-latest
    needs: ["php_build"]
    container:
    # Variable not working in container image name
    # https://github.community/t/how-to-use-env-with-container-image/17252
    # image: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
    # Github PKG Docker not working in container section
    # image: docker://docker.pkg.github.com/tm-bverret/php_cicd/gh-php-test:latest
      image: docker://docker.io/kerberosmorphy/gh-php-test:latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Unit Test
        run: |
          phpunit --bootstrap ./src/Calculator.php ./tests/CalculatorTest.php
          phpunit --bootstrap ./src/Email.php ./tests/EmailTest.php
      - name: Integration Test
        run: phpunit --bootstrap ./src/Music.php ./tests/MusicIntegrationTest.php
      - name: Functional Test
        run: phpunit --bootstrap ./src/Music.php ./tests/MusicFunctionalTest.php
      - name: Test Failure Handler
        if: failure()
        run: |
          chmod +x ./scripts/on_test_failure.sh
          sh ./scripts/on_test_failure.sh

  php_deploy_request:
    name: Deploy Request
    runs-on: ubuntu-latest
    needs: ["php_test"]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Slack Request
        run: echo "Execute Slack Deploy Request script"
      - name: Email Request
        run: echo "Execute Email Deploy Request script"
      - name: Hub Request
        run: echo "Execute Hub Deploy Request script"
