name: PHP-CICD

on:
    push:
        branches:
            - master
            - production

env:
    PHP_IMAGE: ${{ github.repository }}/gh-php
    PHP_TEST_IMAGE: ${{ github.repository }}/gh-php-test
    DOCKER_REGISTRY: docker.pkg.github.com

jobs:
    php_build:
        name: Builds
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            # - name: Get docker images exist
            #   id: get_docker_images_exist
            #   env:
            #     DOCKER_CLI_EXPERIMENTAL: enabled
            #   run: |
            #     echo ${{github.token}} | docker login ${{env.DOCKER_REGISTRY}} --username ${{github.actor}} --password-stdin
            #     echo ${{ env.PHP_IMAGE }}:latest
            #     docker manifest inspect ${{ env.PHP_IMAGE }}:latest > /dev/null ; echo $?
            #     echo "##[set-output name=php_image_exist;]$(docker manifest inspect ${{ env.PHP_IMAGE }}:latest > /dev/null ; echo $?)""
            #     echo "##[set-output name=php_test_image_exist;]$(docker manifest inspect ${{ env.PHP_TEST_IMAGE }}:latest > /dev/null ; echo $?)""
            # - run: |
            #     echo steps.get_docker_images_exist.outputs.php_image_exist
            #     echo steps.get_docker_images_exist.outputs.php_test_image_exist
            - name: Get file changes
              id: get_file_changes
              uses: dorner/file-changes-action@v1.2.0
              with:
                githubToken: ${{ github.token }}
                plaintext: true
            - name: Publish PHP Image
              if: contains(steps.get_file_changes.outputs.files, 'docker/Dockerfile')
              uses: docker/build-push-action@v1.1.0
              with:
                name: ${{ env.PHP_IMAGE }}
                username: ${{ github.actor }}
                password: ${{ github.token }}
                registry: ${{env.DOCKER_REGISTRY}}
                cache_froms: ${{ env.PHP_IMAGE }}:latest
                dockerfile: docker/Dockerfile
                repository: ${{ env.PHP_IMAGE }}
                tag_with_sha: true
                tags: latest
            - name: Publish PHP Test Image
              if: contains(steps.get_file_changes.outputs.files, 'docker/Test.Dockerfile')
              uses: docker/build-push-action@v1.1.0
              with:
                name: ${{ env.PHP_TEST_IMAGE }}
                username: ${{ github.actor }}
                password: ${{ github.token }}
                registry: ${{env.DOCKER_REGISTRY}}
                cache_froms: ${{ env.PHP_IMAGE }}:latest,${{ env.PHP_TEST_IMAGE }}:latest
                dockerfile: docker/Test.Dockerfile
                repository: ${{ env.PHP_TEST_IMAGE }}
                build_args: base_image=${{env.DOCKER_REGISTRY}}/${{env.PHP_IMAGE}}:latest
                tag_with_sha: true
                tags: latest
            - name: Build Failure Handler
              if: failure()
              run: |
                chmod +x ./scripts/on_build_failure.sh
                sh ./scripts/on_build_failure.sh

    php_test:
        name: Tests
        runs-on: ubuntu-latest
        needs: ["php_build"]
        steps:
            - uses: actions/checkout@v2
            - name: Unit Test
              uses: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
              run: |
                phpunit --bootstrap ./src/Calculator.php ./tests/CalculatorTest.php
                phpunit --bootstrap ./src/Email.php ./tests/EmailTest.php
            - name: Integration Test
              uses: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
              run: phpunit --bootstrap ./src/Music.php ./tests/MusicIntegrationTest.php
            - name: Functional Test
              uses: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
              run: phpunit --bootstrap ./src/Music.php ./tests/MusicFunctionalTest.php
            - name: Test Failure Handler
              uses: ${{ env.DOCKER_REGISTRY }}/${{ env.PHP_TEST_IMAGE }}:latest
              if: failure()
              run: |
                chmod +x ./scripts/on_test_failure.sh
                sh ./scripts/on_test_failure.sh

    php_deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: ["php_test"]
        steps:
            - uses: actions/checkout@v2
            - name: chatops:deploy
              run: echo "Execute some chatbot to ask manual deploy"
            - name: php:deploy
              run: echo "Triggered by chatbot response"
            - name: Deploy Failure Handler
              if: failure()
              run: |
                chmod +x ./scripts/on_deploy_failure.sh
                sh ./scripts/on_deploy_failure.sh
